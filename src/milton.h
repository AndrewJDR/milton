#pragma once

// Rename types for convenience
typedef int8_t      int8;
typedef uint8_t     uint8;
typedef int16_t     int16;
typedef uint16_t    uint16;
typedef int32_t     int32;
typedef uint32_t    uint32;
typedef int64_t     int64;
typedef uint64_t    uint64;
typedef int32_t     bool32;

#if defined(_MSC_VER)
#define true 1
#define false 0
#endif


#define stack_count(arr) (sizeof((arr)) / sizeof((arr)[0]))

inline float absf(float a)
{
    return a < 0 ? -a : a;
}
inline int32 absi(int32 a)
{
    return a < 0 ? -a : a;
}

inline int32 maxi(int32 a, int32 b)
{
    return a > b? a : b;
}
inline int32 mini(int32 a, int32 b)
{
    return a < b? a : b;
}

inline float maxf(float a, float b)
{
    return a > b? a : b;
}

inline float minf(float a, float b)
{
    return a < b? a : b;
}

inline int64 minl(int64 a, int64 b)
{
    return a < b? a : b;
}


#include <math.h>  // powf
#include <float.h>

#include "vector.generated.h"  // Generated by metaprogram

inline v2i v2f_to_v2i(v2f p)
{
    return (v2i){(int32)p.x, (int32)p.y};
}
inline v2f v2i_to_v2f(v2i p)
{
    return (v2f){(float)p.x, (float)p.y};
}

typedef struct Rect_s
{
    union
    {
        struct
        {
            v2i top_left;
            v2i bot_right;
        };
        struct
        {
            int32 left;
            int32 top;
            int32 right;
            int32 bottom;
        };
    };
}Rect;

typedef struct Brush_s
{
    float radius;  // This should be replaced by a BrushType and some union containing brush info.
} Brush;

#define LIMIT_STROKE_POINTS 1024
typedef struct Stroke_s
{
    Brush   brush;
    v2f     points[LIMIT_STROKE_POINTS];
    int32   num_points;

    struct Stroke_s *next;
} Stroke;

typedef struct MiltonState_s
{
    int32_t     full_width;             // Dimensions of the raster
    int32_t     full_height;
    uint8_t     bytes_per_pixel;
    uint8_t*    raster_buffer;
    size_t      raster_buffer_size;

    v2i screen_size;

    // Maps screen_size to a rectangle in our infinite canvas.
    int32 view_scale;

    Stroke  working_stroke;

    Stroke  strokes[4096];  // TODO: Create a deque to store arbitrary number of strokes.
    int32   num_strokes;

    // Heap
    Arena*      root_arena;         // Persistent memory.
    Arena*      transient_arena;    // Gets reset after every call to milton_update().

} MiltonState;

typedef struct MiltonInput_s
{
    bool32 full_refresh;
    bool32 reset;
    v2i* brush;
    int scale;
} MiltonInput;

static void milton_init(MiltonState* milton_state)
{
    // Allocate enough memory for the maximum possible supported resolution. As
    // of now, it seems like future 8k displays will adopt this resolution.
    milton_state->full_width      = 7680;
    milton_state->full_height     = 4320;
    milton_state->bytes_per_pixel = 4;
    milton_state->view_scale      = ((int32)1 << 12);
    milton_state->num_strokes       = 1;  // Working stroke is index 0

    int closest_power_of_two = (1 << 27);  // Ceiling of log2(width * height * bpp)
    milton_state->raster_buffer_size = closest_power_of_two;

    milton_state->raster_buffer = arena_alloc_array(milton_state->root_arena,
            milton_state->raster_buffer_size, uint8);
}

static Rect bounding_rect_for_stroke(v2i points[], int64 num_points)
{
    assert (num_points > 0);

    v2i top_left = points[0];
    v2i bot_right = points[0];

    for (int64 i = 1; i < num_points; ++i)
    {
        v2i point = points[i];
        if (point.x < top_left.x) top_left.x = point.x;
        if (point.y > top_left.y) top_left.x = point.x;
        if (point.x > bot_right.x) bot_right.x = point.x;
        if (point.y > bot_right.y) bot_right.y = point.y;
    }
    Rect rect = { top_left, bot_right };
    return rect;
}

    // Move from infinite canvas to raster
inline v2i canvas_to_raster_f(v2i screen_size, int32 view_scale, v2f canvas_point)
{
    v2i screen_center = invscale_v2i(screen_size, 2);
    v2i point = {  (int32)canvas_point.x, (int32)canvas_point.y};
    point = invscale_v2i(point, view_scale);
    point = add_v2i     ( point, screen_center );
    return point;
}
inline v2i canvas_to_raster(v2i screen_size, int32 view_scale, v2i raster_point)
{
    v2i screen_center = invscale_v2i(screen_size, 2);
    v2i point = raster_point;
    point = invscale_v2i(point, view_scale);
    point = add_v2i     ( point, screen_center );
    return point;
}

    // Move to infinite canvas
inline v2f raster_to_canvas(v2i screen_size, int32 view_scale, v2i raster_point)
{
    v2f screen_center = v2i_to_v2f(invscale_v2i(screen_size, 2));
    v2f canvas_point = v2i_to_v2f(raster_point);
    canvas_point = sub_v2f   ( canvas_point ,  screen_center );
    canvas_point = scale_v2f (canvas_point, (float)view_scale);
    return canvas_point;
}

typedef struct BitScanResult_s
{
    uint32 index;
    bool32 found;
} BitScanResult;

inline BitScanResult find_least_significant_set_bit(uint32 value)
{
    BitScanResult result = { 0 };
#if defined(_MSC_VER)
    result.found = _BitScanForward((DWORD*)&result.index, value);
#else
    for (uint32 i = 0; i < 32; ++i)
    {
        if (value & (1 << i))
        {
            result.index = i;
            result.found = true;
            break;
        }
    }
#endif
    return result;
}

inline int32 raster_distance(v2i a, v2i b)
{
    int32 res = maxi(absi(a.x - b.x), absi(a.y - b.y));
    return res;
}
static Rect get_brush_bounds(const Brush brush, float relative_scale)
{
    int32 pixel_radius = (int32)((float)brush.radius * relative_scale);
    Rect bounds =
    {
        // top_left
        (v2i) { -pixel_radius, -pixel_radius },
        // bot_right
        (v2i) { pixel_radius, pixel_radius },
    };
    return bounds;
}

static Rect rect_enlarge(Rect src, int32 offset)
{
    Rect result;
    result.left = src.left - offset;
    result.top = src.top - offset;
    result.right = src.right + offset;
    result.bottom = src.bottom + offset;
    return result;
}

inline Rect get_points_bounds(v2f* points, int32 num_points)
{
    Rect points_bounds;
    points_bounds.top_left = v2f_to_v2i(points[0]);
    points_bounds.bot_right = v2f_to_v2i(points[0]);
    for (int64 i = 0; i < num_points; ++i)
    {
        v2i point = v2f_to_v2i(points[i]);
        if (point.x < points_bounds.left)
            points_bounds.left = point.x;
        if (point.x > points_bounds.right)
            points_bounds.right = point.x;
        if (point.y < points_bounds.top)
            points_bounds.top = point.y;
        if (point.y > points_bounds.bottom)
            points_bounds.bottom = point.y;
    }
    assert (points_bounds.right >= points_bounds.left);
    assert (points_bounds.bottom >= points_bounds.top);
    return points_bounds;
}

v3f hsv_to_rgb(v3f hsv)
{
    v3f rgb = { 0 };

    float h = hsv.x;
    float s = hsv.y;
    float v = hsv.z;
    float hh = h / 60.0f;
    int hi = (int)(hh);
    float cr = v * s;
    float x = cr * (1.0f - absf((fmodf(hh, 2.0f)) - 1.0f));
    float m = v - cr;

    switch (hi)
    {
    case 0:
        {
            rgb.r = cr;
            rgb.g = x;
            rgb.b = 0;
            break;
        }
    case 1:
        {
            rgb.r = x;
            rgb.g = cr;
            rgb.b = 0;
            break;
        }
    case 2:
        {
            rgb.r = 0;
            rgb.g = cr;
            rgb.b = x;
            break;
        }
    case 3:
        {
            rgb.r = 0;
            rgb.g = x;
            rgb.b = cr;
            break;
        }
    case 4:
        {
            rgb.r = x;
            rgb.g = 0;
            rgb.b = cr;
            break;
        }
    case 5:
        {
            rgb.r = cr;
            rgb.g = 0;
            rgb.b = x;
            //  don't break;
        }
    default:
        {
            break;
        }
    }
    rgb.r += m;
    rgb.g += m;
    rgb.b += m;
    return rgb;

}

inline v3f sRGB_to_linear(v3f rgb)
{
    v3f result;
    memcpy(result.d, rgb.d, 3 * sizeof(float));
    float* d = result.d;
    for (int i = 0; i < 3; ++i)
    {
        if (*d <= 0.04045f)
        {
            *d /= 12.92f;
        }
        else
        {
            *d = powf((*d + 0.055f) / 1.055f, 2.4f);
        }
        ++d;
    }
    return result;
}

inline bool32 is_inside_bounds(v2i point, int32 radius, Rect bounds)
{
    return
        point.x + radius >= bounds.left &&
        point.x - radius <  bounds.right &&
        point.y + radius >= bounds.top &&
        point.y - radius <  bounds.bottom;
}

inline bool32 is_inside_bounds_f(v2f point, float radius, Rect bounds)
{
    return
        point.x + radius >= bounds.left &&
        point.x - radius <  bounds.right &&
        point.y + radius >= bounds.top &&
        point.y - radius <  bounds.bottom;
}

inline int32 rect_area(Rect rect)
{
    return (rect.right - rect.left) * (rect.bottom - rect.top);
}

static Rect get_chunk_raster_bounds(v2i screen_size, int32 view_scale,
        Stroke* stroke, int32 start, Brush brush)
{
    v2f* points = stroke->points;
    int32 num_points = stroke->num_points;
    v2i point = canvas_to_raster_f(screen_size, view_scale, points[0]);

    Rect limits = { point.x, point.y, point.x, point.y };
    assert ( start < stroke->num_points );
    for (int i = start; i < num_points; ++i)
    {
        v2i point = canvas_to_raster_f(screen_size, view_scale, points[i]);
        if (point.x < limits.left)
            limits.left = point.x;
        if (point.x > limits.right)
            limits.right = point.x;
        if (point.y < limits.top)
            limits.top = point.y;
        if (point.y > limits.bottom)
            limits.bottom = point.y;
    }
    limits = rect_enlarge(limits, (int32)(brush.radius / view_scale));

    assert (limits.right >= limits.left);
    assert (limits.bottom >= limits.top);
    return limits;
}

// Returns non-zero if the raster buffer was modified by this update.
static bool32 milton_update(MiltonState* milton_state, MiltonInput* input)
{
    arena_reset(milton_state->transient_arena);
    bool32 updated = false;

    if (input->scale)
    {
        input->full_refresh = true;
        static float scale_factor = 1.3f;
        static int32 view_scale_limit = 1900000;
        if (input->scale > 0 && milton_state->view_scale > 2)
        {
            milton_state->view_scale = (int32)(milton_state->view_scale / scale_factor);
        }
        else if (milton_state->view_scale < view_scale_limit)
        {
            milton_state->view_scale = (int32)(milton_state->view_scale * scale_factor) + 1;
        }
    }

    Brush brush;
    {
        brush.radius = 10.0f * milton_state->view_scale;
    }
    v3f color = { 0.9f, 0.4f, 0.4f };

    bool32 finish_stroke = false;
    if (input->brush)
    {
        v2i in_point = *input->brush;

        v2f canvas_point = raster_to_canvas(milton_state->screen_size, milton_state->view_scale, in_point);

        // Add to current stroke.
        milton_state->working_stroke.points[milton_state->working_stroke.num_points++] = canvas_point;
        milton_state->working_stroke.brush = brush;

        milton_state->strokes[0] = milton_state->working_stroke;  // Copy current stroke.

        updated = true;
    }
    else if (milton_state->working_stroke.num_points)
    {
        milton_state->strokes[0] = (Stroke){ 0 };  // Clear working stroke.
        milton_state->working_stroke.num_points = 0;
    }

    uint32* pixels = (uint32*)milton_state->raster_buffer;
    Rect limits = { 0 };

    if (input->full_refresh)
    {
        limits.left = 0;
        limits.right = milton_state->screen_size.w;
        limits.top = 0;
        limits.bottom = milton_state->screen_size.h;
    }
#if 0
    else if (milton_state->num_strokes &&
            milton_state->strokes[milton_state->num_strokes - 1].num_chunks)
    {
        Stroke* stroke = &milton_state->strokes[milton_state->num_strokes - 1];
        StrokeChunk chunk = stroke->chunks[stroke->num_chunks - 1];
        limits = rect_enlarge(chunk.bounds, (int32)stroke->brush.radius);
        limits.top_left = canvas_to_raster(milton_state->screen_size, milton_state->view_scale, limits.top_left);
        limits.bot_right = canvas_to_raster(milton_state->screen_size, milton_state->view_scale, limits.bot_right);
    }
#else
    limits.left = 0;
    limits.right = milton_state->screen_size.w;
    limits.top = 0;
    limits.bottom = milton_state->screen_size.h;
#endif

    Stroke* strokes = milton_state->strokes;

    for (int j = limits.top; j < limits.bottom; ++j)
    {
        for (int i = limits.left; i < limits.right; ++i)
        {
            v2i raster_point = {i, j};
            v2f canvas_point = raster_to_canvas(
                    milton_state->screen_size, milton_state->view_scale, raster_point);

            uint32 pixel = 0xffffffff;
            for(int stroke_i = 0; stroke_i < milton_state->num_strokes; ++stroke_i)
            {
                Stroke* stroke = &strokes[stroke_i];
                v2f* points = stroke->points;
                v2f last_point = {0};
                // Get chunks.
                for (int point_i = 0; point_i < stroke->num_points - 1; ++point_i)
                {
                    // Find closest point.
                    v2f min_point = {0};
                    float min_dist = FLT_MAX;
                    {
                        v2f a = points[point_i];
                        v2f b = points[point_i + 1];

                        v2f ab = sub_v2f(b, a);//{(float)b.x - a.x, (float)b.y - a.y};
                        float mag_ab2 = ab.x * ab.x + ab.y * ab.y;
                        if (mag_ab2 > 0)
                        {
                            float mag_ab = sqrtf(mag_ab2);
                            float d_x = ab.x / mag_ab;
                            float d_y = ab.y / mag_ab;
                            float ax_x = canvas_point.x - a.x;
                            float ax_y = canvas_point.y - a.y;
                            float disc = d_x * ax_x + d_y * ax_y;
                            v2f point;
                            if (disc >= 0 && disc <= mag_ab)
                            {
                                point = (v2f)
                                {
                                    a.x + disc * d_x, a.y + disc * d_y,
                                };
                            }
                            else if (disc < 0)
                            {
                                point = a;
                            }
                            else
                            {
                                point = b;
                            }
                            float dx = (float) (canvas_point.x - point.x);
                            float dy = (float) (canvas_point.y - point.y);
                            float dist = dx * dx + dy * dy;
                            if (dist < min_dist)
                            {
                                min_dist = dist;
                                min_point = point;
                            }
                        }
                    }
                    if (sqrtf(min_dist) < stroke->brush.radius)
                    {
                        pixel = 0xffff0000;
                    }
                }
            } // if
            pixels[j * milton_state->screen_size.w + i] = pixel;
        }
    }
    updated = true;

    return updated;
}
