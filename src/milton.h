#pragma once

// Rename types for convenience
typedef int8_t      int8;
typedef uint8_t     uint8;
typedef int16_t     int16;
typedef uint16_t    uint16;
typedef int32_t     int32;
typedef uint32_t    uint32;
typedef int64_t     int64;
typedef uint64_t    uint64;
typedef int32_t     bool32;

#if defined(_MSC_VER)
#define true 1
#define false 0
#endif

#define stack_count(arr) (sizeof((arr)) / sizeof((arr)[0]))

inline float absf(float a)
{
    return a < 0 ? -a : a;
}
inline int32 absi(int32 a)
{
    return a < 0 ? -a : a;
}

inline int32 maxi(int32 a, int32 b)
{
    return a > b? a : b;
}

inline int32 mini(int32 a, int32 b)
{
    return a < b? a : b;
}


#include <math.h>  // powf

#include "vector.generated.h"  // Generated by metaprogram

typedef struct Rect_s
{
    union
    {
        struct
        {
            v2i top_left;
            v2i bot_right;
        };
        struct
        {
            int32 left;
            int32 top;
            int32 right;
            int32 bottom;
        };
    };
}Rect;

typedef struct Brush_s
{
    int32 view_scale;
    int32 radius;  // This should be replaced by a BrushType and some union containing brush info.
} Brush;

typedef struct Stroke_s
{
    v2i*        points;
    v2i*        rpoints;

    int64       num_points;
    Brush       brush;
    Rect        bounds;
} Stroke;

typedef struct MiltonState_s
{
    int32_t     full_width;             // Dimensions of the raster
    int32_t     full_height;
    uint8_t     bytes_per_pixel;
    uint8_t*    raster_buffer;
    size_t      raster_buffer_size;

    v2i screen_size;

    // Maps screen_size to a rectangle in our infinite canvas.
    int32 view_scale;

    // Current stroke.
    v2i         stroke_points[4096];
    int64       num_stroke_points;

    // Before we get our nice spacial partition...
    Stroke    stored_strokes[4096];
    int64     num_stored_strokes;

    // Heap
    Arena*      root_arena;         // Persistent memory.
    Arena*      transient_arena;    // Gets reset after every call to milton_update().

} MiltonState;

typedef struct MiltonInput_s
{
    bool32 full_refresh;
    bool32 reset;
    v2i* brush;
    int scale;
} MiltonInput;

static void milton_init(MiltonState* milton_state)
{
    // Allocate enough memory for the maximum possible supported resolution. As
    // of now, it seems like future 8k displays will adopt this resolution.
    milton_state->full_width      = 7680;
    milton_state->full_height     = 4320;
    milton_state->bytes_per_pixel = 4;
    milton_state->view_scale      = ((int32)1 << 16);
    // A view_scale of a billion puts the initial scale at one meter.

    int closest_power_of_two = (1 << 27);  // Ceiling of log2(width * height * bpp)
    milton_state->raster_buffer_size = closest_power_of_two;

    milton_state->raster_buffer = arena_alloc_array(milton_state->root_arena,
            milton_state->raster_buffer_size, uint8_t);
}

static Rect bounding_rect_for_stroke(v2i points[], int64 num_points)
{
    assert (num_points > 0);

    v2i top_left = points[0];
    v2i bot_right = points[0];

    for (int64 i = 1; i < num_points; ++i)
    {
        v2i point = points[i];
        if (point.x < top_left.x) top_left.x = point.x;
        if (point.y > top_left.y) top_left.x = point.x;
        if (point.x > bot_right.x) bot_right.x = point.x;
        if (point.y > bot_right.y) bot_right.y = point.y;
    }
    Rect rect = { top_left, bot_right };
    return rect;
}

    // Move from infinite canvas to raster
inline static v2i canvas_to_raster(MiltonState* milton_state, v2i canvas_point)
{
    v2i screen_center = invscale_v2i(milton_state->screen_size, 2);
    v2i point = canvas_point;
    point = invscale_v2i(point, milton_state->view_scale);
    point = add_v2i     ( point, screen_center );
    return point;
}

    // Move to infinite canvas
inline static v2i raster_to_canvas(MiltonState* milton_state, v2i raster_point)
{
    v2i screen_center = invscale_v2i(milton_state->screen_size, 2);
    v2i canvas_point = raster_point;
    canvas_point = sub_v2i   ( canvas_point ,  screen_center );
    canvas_point = scale_v2i (canvas_point, milton_state->view_scale);
    return canvas_point;
}

typedef struct BitScanResult_s
{
    uint32 index;
    bool32 found;
} BitScanResult;

inline BitScanResult find_least_significant_set_bit(uint32 value)
{
    BitScanResult result = { 0 };
#if defined(_MSC_VER)
    result.found = _BitScanForward((DWORD*)&result.index, value);
#else
    for (uint32 i = 0; i < 32; ++i)
    {
        if (value & (1 << i))
        {
            result.index = i;
            result.found = true;
            break;
        }
    }
#endif
    return result;
}

inline int32 raster_distance(v2i a, v2i b)
{
    int32 res = maxi(absi(a.x - b.x), absi(a.y - b.y));
    return res;
}
static Rect get_brush_bounds(const Brush brush, float relative_scale)
{
    int32 pixel_radius = (int32)((float)brush.radius * relative_scale);
    Rect bounds =
    {
        // top_left
        (v2i) { -pixel_radius, -pixel_radius },
        // bot_right
        (v2i) { pixel_radius, pixel_radius },
    };
    return bounds;
}

static Rect rect_enlarge(Rect src, int32 offset)
{
    Rect result;
    result.left = src.left - offset;
    result.top = src.top - offset;
    result.right = src.right + offset;
    result.bottom = src.bottom + offset;
    return result;
}

inline static Rect get_points_bounds(v2i* points, int64 num_points)
{
    Rect points_bounds;
    points_bounds.top_left = points[0];
    points_bounds.bot_right = points[0];
    for (int64 i = 0; i < num_points; ++i)
    {
        v2i point = points[i];
        if (point.x < points_bounds.left)
            points_bounds.left = point.x;
        if (point.x > points_bounds.right)
            points_bounds.right = point.x;
        if (point.y < points_bounds.top)
            points_bounds.top = point.y;
        if (point.y > points_bounds.bottom)
            points_bounds.bottom = point.y;
    }
    return points_bounds;
}

v3f hsv_to_rgb(v3f hsv)
{
    v3f rgb = { 0 };
    /* *pixels++ = 0xffffffff; */
    //*pixels++ = 0xff373737;
    float h = hsv.x;
    float s = hsv.y;
    float v = hsv.z;
    float hh = h / 60.0f;
    int hi = (int)(hh);
    float cr = v * s;
    float x = cr * (1.0f - absf((fmodf(hh, 2.0f)) - 1.0f));
    float m = v - cr;

    switch (hi)
    {
    case 0:
        {
            rgb.r = cr;
            rgb.g = x;
            rgb.b = 0;
            break;
        }
    case 1:
        {
            rgb.r = x;
            rgb.g = cr;
            rgb.b = 0;
            break;
        }
    case 2:
        {
            rgb.r = 0;
            rgb.g = cr;
            rgb.b = x;
            break;
        }
    case 3:
        {
            rgb.r = 0;
            rgb.g = x;
            rgb.b = cr;
            break;
        }
    case 4:
        {
            rgb.r = x;
            rgb.g = 0;
            rgb.b = cr;
            break;
        }
    case 5:
        {
            rgb.r = cr;
            rgb.g = 0;
            rgb.b = x;
            //  don't break;
        }
    default:
        {
            break;
        }
    }
    rgb.r += m;
    rgb.g += m;
    rgb.b += m;
    return rgb;

}
inline static float sRGB_to_linear(float linear)
{
    float sc = linear;
    if (sc <= 0.0031308f)
    {
        sc *= 12.92f;
    }
    else
    {
        sc = powf((sc + 0.055f) / 1.055f, 2.4f);
    }
    return sc;
}
static void rasterize_stroke(
        MiltonState* milton_state, Stroke* stroke, v3f color)
{
    static uint32 mask_a = 0xff000000;
    static uint32 mask_r = 0x00ff0000;
    static uint32 mask_g = 0x0000ff00;
    static uint32 mask_b = 0x000000ff;
    uint32 shift_a = find_least_significant_set_bit(mask_a).index;
    uint32 shift_r = find_least_significant_set_bit(mask_r).index;
    uint32 shift_g = find_least_significant_set_bit(mask_g).index;
    uint32 shift_b = find_least_significant_set_bit(mask_b).index;

    color.r = sRGB_to_linear(color.r);
    color.g = sRGB_to_linear(color.g);
    color.b = sRGB_to_linear(color.b);

    uint32* pixels = (uint32_t*)milton_state->raster_buffer;

    const float relative_scale = (float)stroke->brush.view_scale / (float)milton_state->view_scale;

    assert (stroke->num_points > 0);

    int32 multisample_factor = 3;  // 3x3 square

    Rect points_bounds = stroke->bounds;;
    points_bounds.top_left = canvas_to_raster(milton_state, points_bounds.top_left);
    points_bounds.bot_right = canvas_to_raster(milton_state, points_bounds.bot_right);


    Rect raster_bounds = rect_enlarge(points_bounds, (int32)(relative_scale * stroke->brush.radius) + multisample_factor);
    // Clip the raster bounds
    {
        if (raster_bounds.left < 0)
        {
            raster_bounds.left = 0;
        }
        if (raster_bounds.right > milton_state->screen_size.w)
        {
            raster_bounds.right = milton_state->screen_size.w;
        }

        if (raster_bounds.top < 0)
        {
            raster_bounds.top = 0;
        }
        if (raster_bounds.bottom > milton_state->screen_size.h)
        {
            raster_bounds.bottom = milton_state->screen_size.h;
        }
    }

    Rect brush_bounds = get_brush_bounds(stroke->brush, relative_scale);

    float raster_radius = stroke->brush.radius * relative_scale;

    // Transform to canvas
    int64 num_accepted_points = 0;
    int64 i = 0;
#if 0
    int64 max_accepted_points = num_points * 10;
    v2i prev_point = canvas_to_raster(milton_state, points[0]);
    while ( i < max_accepted_points)
    {
        v2i candidate = canvas_to_raster(milton_state, points[i]);
        if (raster_distance(prev_point, candidate) > 1)
        {
            v2i delta = sub_v2i(candidate, prev_point);
            float magnitude = sqrtf((float)(delta.x * delta.x) + (float)(delta.y * delta.y));
            float dx = 2 * (float)delta.x / magnitude;
            float dy = 2 * (float)delta.y / magnitude;
            prev_point = add_v2i(prev_point, (v2i){(int32)dx, (int32)dy});
            candidate = prev_point;
        }
        else
        {
            ++i; // ready to get next point next frame.
        }

        if (
                candidate.x + raster_radius >= raster_bounds.left &&
                candidate.x - raster_radius <  raster_bounds.right &&
                candidate.y + raster_radius >= raster_bounds.top &&
                candidate.y - raster_radius <  raster_bounds.bottom)
        {
            rpoints[num_accepted_points++] = candidate;
        }

        prev_point = candidate;
    }
#else
    for(int64 i = 0; i < stroke->num_points; ++i)
    {
        v2i candidate = canvas_to_raster(milton_state, stroke->points[i]);
        if (
                candidate.x + raster_radius >= raster_bounds.left &&
                candidate.x - raster_radius <  raster_bounds.right &&
                candidate.y + raster_radius >= raster_bounds.top &&
                candidate.y - raster_radius <  raster_bounds.bottom)
        {
            stroke->rpoints[num_accepted_points++] = candidate;
        }
    }
#endif

    // Paint..
    int32 test_radius = (int32)(raster_radius * raster_radius);
    for (int32 y = raster_bounds.top; y < raster_bounds.bottom; ++y)
    {
        for (int32 x = raster_bounds.left; x < raster_bounds.right; ++x)
        {
            // i,j is our test point
            v2i test_point = { x, y };

            // Iterate through stroke. When inside, draw
            /* v2i prev_point = canvas_to_raster(milton_state, points[0]); */
            v2i prev_point = stroke->rpoints[0];
            int64 i = 0;
            while ( i < num_accepted_points)
            {
                /* v2i canvas_point = points[i]; */
                /* v2i base_point = canvas_to_raster(milton_state, canvas_point); */
                v2i base_point = stroke->rpoints[i];

                // Either do interpolation or increase index to get next point.
#if 0
                if (raster_distance(prev_point, base_point) > 1)
                {
                    v2i delta = sub_v2i(base_point, prev_point);
                    float magnitude = sqrtf((float)(delta.x * delta.x) + (float)(delta.y * delta.y));
                    float dx = 2 * (float)delta.x / magnitude;
                    float dy = 2 * (float)delta.y / magnitude;
                    prev_point = add_v2i(prev_point, (v2i){(int32)dx, (int32)dy});
                    base_point = prev_point;
                }
                else
                {

                    ++i; // ready to get next point next frame.
                }
#else
                ++i;
#endif
#if 1
                if (
                        !(
                            base_point.x - raster_radius > brush_bounds.right &&
                            base_point.y + raster_radius < brush_bounds.top &&
                            base_point.x + raster_radius < brush_bounds.left &&
                            base_point.y - raster_radius > brush_bounds.bottom
                         ))
#endif
                {
                    // TODO: Check bounding box for stroke at this point.

                    // Check if inside brush!
                    // TODO: multisample
                    float brush_alpha = 1.0f;

                    v2i diff = sub_v2i(test_point, base_point);
                    int32 dist2 = diff.x * diff.x + diff.y * diff.y;
                    if (dist2 < test_radius)
                    {
                        uint32 pixel_color =
                            ((uint8)(brush_alpha * 255.0f) << shift_a) +
                            ((uint8)(color.r * 255.0f) << shift_r) +
                            ((uint8)(color.g * 255.0f) << shift_g) +
                            ((uint8)(color.b * 255.0f) << shift_b);
                        pixels[y * milton_state->screen_size.w + x] = pixel_color;
                    }

                    prev_point = base_point;
                }
            }
        }
    }
}

// Returns non-zero if the raster buffer was modified by this update.
static bool32 milton_update(MiltonState* milton_state, MiltonInput* input)
{
    arena_reset(milton_state->transient_arena);
    bool32 updated = 0;
    if (input->scale)
    {
        if (input->scale > 0 && milton_state->view_scale > 2)
        {
            milton_state->view_scale /= 2;
        }
        else if (milton_state->view_scale <= ((int32)1 << 30))
        {
            milton_state->view_scale *= 2;
        }

    }
    // Do a complete re-rasterization.
    if (input->full_refresh || 1)
    {
        uint32* pixels = (uint32_t*)milton_state->raster_buffer;
        for (int y = 0; y < milton_state->screen_size.h; ++y)
        {
            for (int x = 0; x < milton_state->screen_size.w; ++x)
            {
                float c = (float)y / (float)milton_state->screen_size.h;
                float h, s, v;
                h = c * 360;
                s = 0.8f;
                v = (float)x / (float)milton_state->screen_size.w;
                v3f hsv = {h, s, v};
                v3f rgb = hsv_to_rgb(hsv);
                rgb.r = sRGB_to_linear(rgb.r);
                rgb.g = sRGB_to_linear(rgb.g);
                rgb.b = sRGB_to_linear(rgb.b);

                rgb.r *= 255;
                rgb.g *= 255;
                rgb.b *= 255;
                *pixels = 0xff000000;
                *pixels |= ((uint32)((uint8)rgb.r)) << 16;
                *pixels |= ((uint32)((uint8)rgb.g)) << 8;
                *pixels++ |= ((uint32)((uint8)rgb.b));


            }
        }
        updated = 1;
    }
    Brush brush = { 0 };
    {
        brush.view_scale = milton_state->view_scale;
        brush.radius = 10;
    }
    v3f color = { 0.5f, 0.5f, 0.5f };
    bool32 break_stroke = false;
    if (input->brush)
    {
        float c = (float)input->brush->x / (float)milton_state->screen_size.w;
        color = (v3f) { c, c, c };
        v2i in_point = *input->brush;

        v2i canvas_point = raster_to_canvas(milton_state, in_point);

        // Add to current stroke.

        milton_state->stroke_points[milton_state->num_stroke_points] = canvas_point;


        Rect points_bounds = get_points_bounds(
                milton_state->stroke_points, milton_state->num_stroke_points);

        Rect raster_bounds;
        raster_bounds.top_left = canvas_to_raster(milton_state, points_bounds.top_left);
        raster_bounds.bot_right = canvas_to_raster(milton_state, points_bounds.bot_right);
        if (((raster_bounds.right - raster_bounds.left) * (raster_bounds.bottom - raster_bounds.top))
                > 25)
        {
            break_stroke = true;
        }

        v2i* rpoints = arena_alloc_array(milton_state->transient_arena, milton_state->num_stroke_points, v2i);

        ++milton_state->num_stroke_points;

        Stroke s = { 0 };
        {
            s.bounds = points_bounds;
            s.points = milton_state->stroke_points;
            s.rpoints = rpoints;
            s.num_points = milton_state->num_stroke_points;
            s.brush = brush;
        }
        rasterize_stroke(milton_state, &s, color);

        updated = 1;
    }
    else if (milton_state->num_stroke_points > 0)
    {
        break_stroke = true;
    }
    if (break_stroke)
    {
        // Push stroke to history.
        Stroke stored;
        stored.bounds = get_points_bounds(milton_state->stroke_points, milton_state->num_stroke_points);
        stored.rpoints = arena_alloc_array(milton_state->root_arena, 10 * milton_state->num_stroke_points, v2i);
        stored.brush = brush;
        stored.points = arena_alloc_array(milton_state->root_arena,
                milton_state->num_stroke_points, v2i);
        memcpy(stored.points, milton_state->stroke_points,
                milton_state->num_stroke_points * sizeof(v2i));
        stored.num_points = milton_state->num_stroke_points;


        milton_state->stored_strokes[milton_state->num_stored_strokes++] = stored;

        milton_state->num_stroke_points = 0;
    }
    if (input->reset)
    {
        milton_state->view_scale = 1 << 16;
        milton_state->num_stored_strokes = 0;
        updated = 1;
    }
    // Rasterize *every* stroke...
    for (int i = 0; i < milton_state->num_stored_strokes; ++i)
    {
        Stroke* stored = &milton_state->stored_strokes[i];
        rasterize_stroke(milton_state, stored, color);
    }

    return updated;
}
