To-Do
=====


- Bugs
    - Lower GL dependencies so it runs on crappy hardware (as it should)
    - :)

- Milton v0.1.0
    -  GUI
        - F1 help widget
        - Set background color
        - GUI toggle key
        - "Export" button
        - Selection rectangle (engine support needed)
        - History slider
        - Export buttons
            - OS-dependent file-save dialog.
        - Brush / Eraser
            - Image Button
        - Layers (w/engine support)
        - Options
            - GUI scale
        - Set background image?
        - Reduce or remove widget rounding
        - can 'imgui.ini' be name-changed?
    - Porting:
        - Ctrl -> Cmd in OSX. Other cross platform binding issues?
        - Easytab: Stylus buttons.
        - Easytab: Distinction between eraser and pen.
    - Application
        - App data directory
            - Windows (AppData\Local\MiltonPaint)
            - Unix (~/.config/milton_paint)
            - What if directory exists?
        - DPI-aware (gui scale set by default)
    - Performance:
        - Strokes should be sampled based on relative size
        - memcpy when Panning (most users will benefit hugely)
        - Do not redraw when stroking over existing drawing.
        - Adaptive resolution scaling
        - Check valgrind for cache performance from new allocation patterns..
        - 4x4 Blockgroups (morton-order)
        - Undo/Redo: Only redraw necessary area.
        - Amdahl's curse... Parallelize GUI rendering
        - Stress the renderer with a huge drawing. (i.e. Do we need smart spatial acceleration?)
        - AVX backend??
    - Robust save
        - Save to temp file and swap
        - Keep backups
        - Future-proof. Marker for extensions post v1.0
        - Check return values for stdlib funcs.
    - Profile loading
        - Is allocation a problem?
    - Export
        - JPEG (tiny_jpeg)
        - stb_image_write (PNG, BMP, TGA)
    - Brush
        - Support for general, implicitly defined brushes
    - Debug
        - Input recorder for bug replication
    - Canvas
        - Determine precision limits.
    - Playback
        - Store view changes in persist file
        - Playback mode? Separate viewer?
    - Milton Image Viewer
        - Legal crap
            - Separate into Application / Engine.  App is GPL, "Engine" is liberal. For integration with other stuff!
            - *or* Fuck it. Go full MIT
        - Viewer API & examples.


============================================================
====                   1.0 Beta Milestone               ====
============================================================

- Future
    - Wacom: (?) Support for pan & rotate.
